syntax = "proto3";

package evomorph;

import "protos/common.proto";
import "google/api/field_behavior.proto";

option go_package = "evomorph/protos";

// Human-readable parameters for our GJSM model.
message Params {
  // Initial number of cells.
  uint32 num_cells = 1;
}

// Payload for running a simulation.
message RunRequest {
  // Simulation name.
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // End time (mcs).
  uint32 length = 2 [(google.api.field_behavior) = REQUIRED];

  // Parameters payload.
  Params params = 3 [(google.api.field_behavior) = REQUIRED];
}

// Timing information of current simulation.
message Progress {
  // Current time (mcs).
  uint32 cur_mcs = 1 [(google.api.field_behavior) = REQUIRED];

  // End time (mcs).
  uint32 max_mcs = 2 [(google.api.field_behavior) = REQUIRED];
}

// Single frame from a trajectory.
message Frame {
  enum FrameType {
    PICTURE = 0;   // Human viewable frame, eg, JPEG, PNG.
    STRUCTURE = 1; // Fully resolved structure, eg, VTK, HDF5.
  }

  // Which kind of frame it is.
  FrameType type = 1 [(google.api.field_behavior) = REQUIRED];

  // Path to the corresponding file.
  string path = 2 [(google.api.field_behavior) = REQUIRED];
}

service Controller {
  rpc Run(RunRequest) returns(Simulation);
  rpc Pause(Simulation) returns(Status);
  rpc Resume(Simulation) returns(Status);
  rpc Cancel(Simulation) returns(Status);
  rpc GetStatus(Simulation) returns(Status);
  rpc GetProgress(Simulation) returns(Progress);
  rpc GetPictures(Simulation) returns(stream Frame);
  rpc GetStructures(Simulation) returns(stream Frame);
}
